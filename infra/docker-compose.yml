version: '3.8'

services:
  # Main extraction pipeline
  newevolveo3pro:
    build: 
      context: ..
      dockerfile: infra/Dockerfile
    container_name: newevolveo3pro
    environment:
      - PYTHONPATH=/app/src
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-false}
    env_file:
      - ../.env
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
      - ../config:/app/config:ro
    ports:
      - "8080:8080"  # Main application
      - "8000:8000"  # Prometheus metrics
    depends_on:
      - prometheus
      - grafana
    restart: unless-stopped
    networks:
      - etl-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - etl-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-dashboard.json:/var/lib/grafana/dashboards/newevolveo3pro.json
      - ./grafana-provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - etl-network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - etl-network
    restart: unless-stopped

  # Streamlit UI for golden file editing
  streamlit:
    build: 
      context: ..
      dockerfile: infra/Dockerfile
    container_name: streamlit-ui
    command: streamlit run tools/golden_editor.py --server.port=8501 --server.address=0.0.0.0
    environment:
      - PYTHONPATH=/app/src
    env_file:
      - ../.env
    volumes:
      - ../data:/app/data
      - ../tools:/app/tools
    ports:
      - "8501:8501"
    networks:
      - etl-network
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  etl-network:
    driver: bridge
