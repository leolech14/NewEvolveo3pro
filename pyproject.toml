[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "newevolveo3pro"
version = "0.1.0"
description = "Failure-proof bank statement to CSV extraction pipeline"
authors = [
    {name = "Leo Lech", email = "leo@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "pandas>=2.0.3",
    "polars>=0.20.0",
    "pyarrow>=12.0.0",
    "numpy>=1.24.0",
    "pdfplumber>=0.11.6",
    "PyMuPDF>=1.23.0",
    "camelot-py[cv]>=0.11.0",
    "boto3>=1.35.0",
    "azure-ai-formrecognizer>=3.3.0",
    "rapidfuzz>=3.10.0",
    "scikit-learn>=1.3.0",
    "pandera>=0.17.0",
    "prefect>=2.19.0",
    "typer>=0.9.0",
    "rich>=13.9.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.5.0",
    "loguru>=0.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.11.0",
    "mypy>=1.8.0",
    "pre-commit>=3.5.0",
    "pandas-stubs>=2.0.0",
    "boto3-stubs>=1.35.0",
    "botocore-stubs>=1.35.0",
]

cloud = [
    "google-cloud-documentai>=2.20.0",
]

monitoring = [
    "prometheus-client>=0.20.0",
    "great-expectations>=0.18.0",
]

ui = [
    "streamlit>=1.30.0",
    "jupyter>=1.0.0",
    "ipywidgets>=8.0.0",
    "plotly>=5.18.0",
    "ydata-profiling>=4.6.0",
]

all = [
    "newevolveo3pro[dev,cloud,monitoring,ui]",
]

[project.scripts]
evolve = "src.cli:main"

[project.urls]
Homepage = "https://github.com/leolech14/NewEvolveo3pro"
Repository = "https://github.com/leolech14/NewEvolveo3pro"
Issues = "https://github.com/leolech14/NewEvolveo3pro/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.toml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "E722",  # bare except (temporary)
    "F821",  # undefined name (temporary)
    "F401",  # unused import (temporary)
    "E402",  # module level import not at top (temporary)
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["src"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unused_configs = true
strict_equality = true
mypy_path = "."
namespace_packages = true
exclude = ["venv/", "build/", "dist/"]

[[tool.mypy.overrides]]
module = [
    "pdfplumber.*",
    "camelot.*",
    "azure.ai.formrecognizer.*",
    "google.cloud.documentai.*",
    "rapidfuzz.*",
    "fitz.*",
    "prefect.*",
    "streamlit.*",
    "great_expectations.*",
    "ydata_profiling.*",
    "sklearn.*",
    "joblib.*",
    "fpdf.*",
    "imagehash.*",
    "jmespath.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
